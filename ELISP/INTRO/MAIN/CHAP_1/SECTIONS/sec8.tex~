\chapter{Traitement de liste}\etch{1}

Pour un \oe{}il non exercé, Lisp est un langage de programmation
étrange. Dans du code Lisp il y a des parenthèses partout. Certains
prétendent même que le nom signifie <<Lots of Isolated Silly
Parentheses\footnote{Beaucoup de parenthèses idiotes isolées}>>. Mais
cette prétention est injustifiée. Lisp signifie LISt
Processing\footnote{traitement de liste}, et le langage de
programmation gère les listes (et listes de listes) en les mettant entre
parenthèses. Les parenthèses marquent les limites de la
liste. Parfois, une liste est précédée par une apostrophe ou
guillemet, <<'>>\footnote{L'apostrophe ou guillemet simple est
  l'abréviation de la fonction citation; les fonctions sont définies
  dans la section \cfchs{1}{3} Générer un message d'erreur,
  page\cfchsg{1}{3}} les listes sont la base de Lisp.

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec1}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec2}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec3}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec4}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec5}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec6}
 
\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec7}

\section{Arguments}\etchs{1}{8}

Pour voir comment l'information est transmise à des fonctions,
regardons de nouveau notre vieille veille, l'ajout de deux plus
deux. En Lisp, ça s'écrit comme suit :
\begin{center}
  \tm{(+ 2 2)}
\end{center}

Si vous évaluez cette expression, le nombre 4 apparaîtra dans votre
zone écho. Ce que fait l'interprète Lisp c'est d'ajouter les nombres
qui suivent le \tm{+}.

Les nombres ajoutés par \tm{+} sont appelés les arguments de la
fonction \tm{+}. Ces nombres sont les informations que l'on donne à ou
transmis à la fonction. 

Le mot <<argument>> vient de la façon dont il est utilisé en
mathématiques et ne se réfère pas à une dispute entre deux personnes;
au contraire, il se réfère à l'information présentée à la fonction,
dans ce cas, à la fonction \tm{+}. En Lisp, les arguments d'une
fonction sont les atomes ou les listes qui suivent la fonction. Les
valeurs renvoyées par l'évaluation de ces atomes ou des listes sont
passées à la fonction. Différentes fonctions nécessitent différents
nombres d'arguments; certaines fonctions n'en exigent pas du
tout\footnote{Il est curieux de suivre le chemin par lequel le mot
  <<argument>> est venu d'avoir deux significations différentes, l'une
  en mathématiques et l'autre en anglais de tous les jours. Selon le
  Oxford English Dictionary, le mot dérive du Latin <<\tm{faire
    comprendre, prouver}>>; ainsi venu à signifier, par un fil de
  dérivation, <<la preuve présentée comme preuve>>, c'est-à-dire,
  <<l'information offerte>>, qui a conduit à sa signification en
  Lisp. Mais dans l'autre fil de dérivation, il est venu à signifier
  <<d'affirmer d'une manière contre laquelle d'autres peuvent faire
  des contre affirmations>>, qui ont conduit à la signification du mot
  comme une dispute. (Notons ici que le mot anglais a deux définitions
  différentes qui s'y rattachent en même temps. En revanche, dans
  Emacs Lisp, un symbole ne peut pas avoir deux définitions de
  fonctions différentes en même temps.)}. 

\subsection{Arguments des types de données}\etchss{1}{8}{1}

Le type de données qui doivent être transmises à une fonction dépend
de quel type d'information elle utilise. Les arguments d'une fonction
telle que \tm{+} doivent avoir des valeurs qui sont des nombres,
depuis \tm{+} ajoute des nombres. D'autres fonctions utilisent
différents types de données pour leurs arguments.

Par exemple, la fonction \tm{concat} relie ou réunit deux ou plusieurs
chaînes de caractères pour produire une chaîne. Les arguments sont des
chaînes. La concaténation des deux chaînes de caractères \tm{abc},
\tm{def} produit la chaîne \tm{abcdef} seule. Ceci peut être vu par
l'évaluation de ce qui suit : 
\begin{center}
  \tm{(concat 'abc' 'def')} % ne marche pas en TeX
\end{center}

La valeur produite en évaluant cette expression est <<\tm{abcdef}>>.

Une fonction comme sous-chaîne utilise à la fois une chaîne et des
nombres comme arguments. La fonction renvoie une partie de la chaîne,
une chaîne du premier argument. Cette fonction prend trois
arguments. Son premier argument est la chaîne de caractères, les
deuxième et troisième arguments sont des nombres qui indiquent le
début et la fin de la sous-chaîne. Les nombres sont un comptage du
nombre de caractères (ponctuation et espaces compris) depuis le début
de la chaîne.

Par exemple, si vous évaluez la suivante :
\begin{center}
  \tm{(substring ''The quick brown fox jumped.'' 16 19)}
\end{center}

vous verrez ''\tm{fox}'' apparaître dans la zone d'écho. Les arguments
sont la chaîne et les deux nombres. 

Notez que la chaîne passée à \tm{substring} est un atome, même si elle
est composée de plusieurs mots séparés par des espaces. Lisp compte
tout entre les deux guillemets dans le cadre de la chaîne, y compris
les espaces. Vous pouvez penser la fonction \tm{substring} comme une
sorte <<d'écraseur d'atome>>, car il faut un atome contraire à
l'indivisible et en extraire une partie. Cependant, \tm{substring} est
seulement capable d'extraire une sous-chaîne à partir d'un argument
qui est une chaîne, pas d'un autre type d'atome comme un nombre ou un
symbole.



\subsection{Un argument comme la valeur d'une variable ou d'une
  liste}\etchss{1}{8}{2}

Un argument peut être un symbole qui renvoie une valeur quand il est
évalué. Par exemple, lorsque le symbole de remplissage par colonne
lui-même est évalué, il renvoie un nombre. Ce nombre peut être utilisé
pour une addition. Positionner le curseur après l'expression suivante
et le type \rec{C}{x}{C}{e}:
\begin{center}
  \tm{(+ 2 fill-column)}
\end{center}

La valeur sera un nombre deux de plus que ce que vous obtenez en
évaluant \tm{fill-column} seul. Pour moi, c'est 74, parce que ma
valeur de \tm{fill-column} est 72.

Comme nous venons de le voir, un argument peut être un symbole qui
renvoie une valeur lors de l'évaluation. En outre, un argument peut
être une liste qui renvoie une valeur quand il est évalué. Par
exemple, dans l'expression suivante, les arguments de la fonction
\tm{concat} sont les chaînes <<The>> et <<red foxes.>> et la liste
\tm{(number-to-string (+ 2 fill-column))}.
\begin{center}
  \tm{(concat ''The '' (number-to-string (+ 2 fill-column)) '' red foxes.'')}
\end{center}

Si vous évaluez cette expression et si, comme avec mon Emacs,
\tm{fill-column} évalue à 72---<<The 74 red foxes.>> apparaît dans la
zone écho. (Notez que vous devez mettre des espaces après le mot
<<The>> et avant le mot <<red>> de sorte qu'ils apparaissent dans la
chaîne finale. La fonction \tm{number-to-string} convertit l'entier
que la fonction d'addition renvoie à une chaîne. \tm{number-to-string}
est également connu comme \tm{int-to-string}.)


\subsection{Nombre variable d'arguments}\etchss{1}{8}{3}

Certaines fonctions, comme \tm{concat}, \tm{+} ou \tm{*}, prendre
n'importe quel nombre d'arguments. (Le \tm{*} est le symbole de
multiplication.) Ceci peut être vu par l'évaluation de chacune des
expressions suivantes de la manière habituelle. Ce que vous verrez
dans la zone d'écho est imprimé dans ce texte après <<$\Rightarrow$>>,
que vous pouvez lire comme <<évalué à >>.

Dans la première série, les fonctions n'ont pas d'arguments:
\begin{center}
  \begin{tabular}[m]{lrl}
    \tm{(+)} &$\Rightarrow$ & 0 \\
    \tm{(*)} &$\Rightarrow$ & 1 
  \end{tabular}
\end{center}

Dans cet ensemble, les fonctions ont un argument de chaque:
\begin{center}
  \begin{tabular}[m]{lrl}
    \tm{(+ 3)} &$\Rightarrow$ & 3 \\
    \tm{(* 3)} &$\Rightarrow$ & 3 
  \end{tabular}
\end{center}

Dans cet ensemble, les fonctions ont trois arguments de chaque:
\begin{center}
  \begin{tabular}[m]{lrl}
    \tm{(+ 3 4 5)} &$\Rightarrow$ & 12 \\
    \tm{(* 3 4 5)} &$\Rightarrow$ & 60 
  \end{tabular}
\end{center}


\subsection{Utiliser le mauvais type d'objet pour un argument}\etchss{1}{8}{4}

Quand une fonction est passée un argument de type incorrect,
l'interprète Lisp produit un message d'erreur. Par exemple, la
fonction \tm{+} attend les valeurs de ses arguments pour être des
nombres. Comme une expérience, nous pouvons passer le symbole cité
bonjour au lieu d'un nombre. Positionner le curseur après l'expression
suivante et le type \rec{C}{x}{C}{e} :
\begin{center}
  \tm{(+ 2 'hello)}
\end{center}

Lorsque vous faites cela, vous allez générer un message d'erreur. Ce
qui est arrivé est que \tm{+} a essayé d'ajouter le 2 à la valeur
renvoyée par \tm{'hello}, mais la valeur renvoyée par \tm{'hello} est
le symbole \tm{hello}, pas un nombre. Seuls des chiffres peuvent être
ajoutés. Donc \tm{+} ne pouvait pas mener à bien son addition. 

Vous aller créer et entrer dans un tampon \tm{*Backtrace*} qui dit :

{\ttfamily
Debugger entered--Lisp error:
\begin{center}
  (wrong-type-argument number-or-marker-p hello)
\end{center}
+(2 hello)

eval((+ 2 (quote hello)))

eval-last-sexp-1(nil)

eval-last-sexp(nil)

call-interactively(eval-last-sexp)
}

Comme d'habitude, le message d'erreur essaie d'être utile et logique
après vous apprenez à lire\footnote{\tm{(quote hello)} est une
  expansion de l'abréviation \tm{'hello}}. 

La première partie du message d'erreur est simple; il est dit
<<\tm{wrong type argument}>>. Vient ensuite le mot de jargon
mystérieux <<\tm{number-or-marker-p}>>. Ce mot est d'essayer de vous
dire ce genre d'argument du \tm{+} prévu. 

Le symbole \tm{number-or-marker-p} dit que l'interprète Lisp essaie de
déterminer si l'information a présenté (la valeur de l'argument) est
un nombre ou un marqueur (un objet spécial représentant une position
de tampon). Ce qu'il fait est le test pour voir si le \tm{+} est étant
des nombres à ajouter. Il teste aussi de voir si l'argument est
quelque chose appelé un marqueur, qui est une caractéristique
spécifique de Emacs Lisp. (Dans Emacs, les emplacements dans une
mémoire tampon sont enregistrés en tant que marqueurs. Lorsque la
marque est réglée avec le \rep{C}{@} ou la commande \rep{C}{SPC}, sa
position est maintenue en tant que marqueur. La marque peut être
considérée comme un nombre---le nombre de caractères les emplacement
est à partir du début de la mémoire tampon). En Lisp, \tm{+} peut être
utilisé pour ajouter la valeur numérique de positions de marqueurs que
des nombres.

Le <<\tm{p}>> de <<\tm{number-or-marker-p}>> est l'incarnation d'une
pratique a commencé dans les premiers jours de la programmation
Lisp. Le <<\tm{p}>> signifie <<prédicat>>. Dans le jargon, utilisé par
les chercheurs Lisp, un prédicat renvoie à une fonction pour
déterminer si une propriété est vraie ou fausse. Ainsi, le <<\tm{p}>>
nous dit que ce \tm{number-or-marker-p} est le nom d'une fonction qui
détermine si c'est vrai ou faux que l'argument fourni est un nombre ou
un marqueur. Autres symboles Lisp qui se terminent par <<\tm{p}>>
comprennent \tm{zerop}, une fonction qui teste si son argument a la
valeur de zéro, et \tm{listp}, une fonction qui teste si son argument
est une liste. 

Enfin, la dernière partie du message d'erreur est le symbole
\tm{hello}. C'est la valeur de l'argument qui a été adopté pour
\tm{+}. Si l'addition avait été adoptée le bon type d'objet, la valeur
passée aurait été un certain nombre, comme 37, plutôt qu'un symbole
comme \tm{hello}. Mais alors vous n'auriez pas reçu le message d'erreur.

\subsection{La fonction \tm{message}}\etchss{1}{8}{5}

Comme \texttt{+}, la fonction de \texttt{message} prend un nombre
variable d'arguments. Elle est utilisée pour envoyer des messages à
l'utilisateur et est si utile que nous allons la décrire ici.

Un message est imprimé dans la zone écho. Par exemple, vous pouvez
imprimer un message dans votre zone de répercussion en évaluant la
liste suivante :   

\tm{(message ``This message appears in the echo area'')}

L'ensemble de la chaîne de caractères entre guillemets est un argument
unique et est imprimé dans sa totalité. (Notez que dans cet exemple,
le message lui-même apparaît dans la zone écho entre guillemets; cela
parce que vous voyez la valeur retournée par la fonction
\tm{message}. Dans la plupart des utilisations de \tm{message} dans
les programmes que vous écrivez, le texte sera imprimé dans la zone
d'écho comme un effet secondaire, sans les guillemets. Voir Section
\cfchss{3}{3}{1} ``multiply-by-seven in detail'' page
\cfchssg{3}{3}{1}, pour un exemple de cela).

Cependant, s'il y a un '\tm{\%s}' dans la chaîne de caractères entre
guillemets, la fonction \tm{message} n'imprimera pas le '\tm{\%s}' en
tant que tel, mais l'assimile à un argument qui suit la chaîne. Elle
évalue le second argument et imprime sa valeur à l'endroit où se situe
'\tm{\%s}' dans la chaîne.

Vous pouvez voir cela en positionnant le curseur après l'expression
suivante et en tapant \tm{C-x C-e}:

\tm{(message ``The name of this buffer is : \%s.'' (buffer-name))}

Dans Info, \tm{``The name of this buffer is :*info*.''} apparaîtra
dans la zone d'écho. La fonction \tm{buffer-name} renvoie  le nom du
tampon comme une chaîne, où la fonction \tm{message} insère à la place
de \tm{'\%s'}.

Pour imprimer une valeur comme un entier, utiliser \tm{'\%d'} de la
même manière que \tm{'\%s'}.  Par exemple, pour imprimer un message
dans la zone écho qui indique la valeur de \tm{fill-column}, évaluer les
points suivants:

\tm{(message ``The value of fill-column is: \%d.'' fill-column)}

Sur mon système, lorsque j'évalue cette list, \tm{``The value of
  fill-column is 72.''} apparaît dans ma zone d'écho.\footnote{En fait
    vous pouvez utiliser \tm{'\%s'} pour afficher un nombre. Ce n'est
    pas spécifique. \tm{\%d} n'affiche que la partie à gauche de la
    virgule d'un nombre décimal, et rien d'autre qui ne soit un
    nombre.}

S'il y a plus qu'un \tm{'\%s'} dans la chaîne entre les quotes, la
valeur du premier argument est affichée à l'endroit du premier
\tm{'\%s'}, la valeur du deuxième argument est affichée à l'endroit du
deuxième \tm{'\%s'} et ansi de suite.

Par exemple, si vous faites l'évaluation suivante : 

\tm{(message ``There are \%d \%s in the office!''}

\hspace{1.5cm}\tm{(- fill-column 14) ``pink elephants'')}

un message plutôt lunatique apparaîtra dans votre zone de
répercussion. Sur mon système, il dit, 

\tm{``The are 58 pink elephants in the office!''}.

L'expression \tm{(- fill-column 14)} est évaluée et le nombre
résultant est inséré à la place de \tm{'\%d'}; et la chaîne de
caractères \tm{``pink elephants''}, est traitée comme un argument
simple et insérée à la place de \tm{'\%s'} :

{\tt 
  \begin{center}
    \begin{tabular}[m]{*{3}l}
      (message &''He saw \%d \%s''  & \\
               & (- fill-column 32) & \\
               & (concat ``red ``   & \\
               &                    & (substring \\
               &                    & ``The quick brown foxes
                                      jumped.'' 16 21) \\
               &                    & `` leaping.''))
    \end{tabular}
  \end{center}
 }

Dans cet exemple, la fonction \tm{message} a trois arguments : la
chaîne \tm{``He saw \%d \%s''}, l'expression \tm{(- fill-column 32)}
est insérée à la place de \tm{'\%d'}; et la valeur renvoyée par l'expression
commençant par \tm{concat} est insérée à la place de \tm{'\%s'}. 

Lorsque votre colonne de remplissage est de 70 et que vous évaluer
l'expression, le message \tm{``He saw 38 red foxes leaping.''} aparaît
dans votre zone d'écho.

\section{Initialisation de variable}\etchs{1}{9}

Il y a plusieurs façons d'affecter une variable. Une des façons est
d'utiliser la fonction \tm{set} ou \tm{setq}. Une autre façon est
d'utiliser la fonction \tm{let} (voir Section \cfchs{3}{6} ``let''
page \cfchsg{3}{6}). (Le jargon pour ce processus est de \textit{lier}
une variable à une valeur.)

Les sections suivantes ne décrivent pas seulement le fonctionnement de
\tm{set} et \tm{setq} mais illustrent aussi comment les arguments sont
passés. 

\subsection{Utilisation de \tm{set}}\etchss{1}{9}{1}

Pour affecter la valeur du symbole \tm{flowers} à la liste \tm{'(rose
  violet daisy buttercup)}, évaluer l'expression suivante en
positionnnant le curseur après l'expression et en tappant le raccourci
suivant : \tm{C-x  C-e}.

\tm{(set 'flowers '(rose violet daisy buttercup))}

Cette liste \tm{(rose violet daisy buttercup)} apparaîtra dans la zone
d'écho. C'est ce qui est \textit{renvoyé} par la fonction
\tm{set}. Comme un effet secondaire, le symbole \tm{flowers} est lié à
la liste; qui est, le symbole \tm{flowers} qui peut être considéré
comme une variable, est donné à la liste comme sa valeur. (Ce
processus, par la manière, illustre comment un effet secondaire à
l'interprète Lisp, réglage de la valeur, peut être l'effet principal
qui nous intéresse nous les humains. C'est parce que chaque
fonction Lisp doit renvoyer une valeur si elle ne reçoit pas une
erreur, mais elle aura seulement un effet secondaire si elle est conçue
pour avoir un.) 

Après l'évaluation de l'expression \tm{set}, vous pouvez évaluer le
symbole \tm{flowers} et cela vous renverra la valeur que vous venez de
régler. Voici le symbole. Placez le curseur après lui et tapez la
séquence de touche \tm{C-x C-e}.

\tm{flowers}

Quand vous évaluez \tm{flowers}, la liste \tm{(rose violet daisy
  buttercup)} apparaît dans la zone d'écho. 

Incidemment, si vous évaluez \tm{'flowers}, la variable avec une quote
devant elle, ce que vous verrez dans la zone d'écho c'est le symbole
lui-même. Voici le symbole quoté, donc vous pouvez essayer ça :

\tm{'flowers}

Notez aussi, que lorsque vous utilisez aussi \tm{set}, vous avez
besoin de quotes pour chaque argument de \tm{set}, à moins que vous ne
souhaitiez qu'ils soient évalués. Puisque nous ne voulons pas non plus
évalué les arguments ni de la variable \tm{flowers} ni de la liste
\tm{(rose violet daisy buttercup)}, les deux sont quotés. (Lorsque
vous utilisez \tm{set} sans quote pour son premier argument, le
premier argument est evalué avant que n'importe quoi d'autre soit
fait. Si vous aviez fait ça et que \tm{flowers} n'avait pas encore de
valeur, vous auriez reçu un message d'erreur disant que \tm{'Symbol's
  value as variable is void'}; d'autre part, si \tm{flowers} avait
renvoyé une valeur après qu'elle ait été évalué, le \tm{set} tenterait
de régler la valeur qui a été renvoyé. Il y a des situations où c'est
la bonne chose à faire pour la fonction; mais de telles situations
sont rares.)

\subsection{Utilisation de \tm{setq}}\etchss{1}{9}{2}

En pratique, vous mettez une quote presque toujours devant le premier
argument de \tm{set}. La combinaison de \tm{set} et d'une quote pour
le premier argument et si fréquente qu'elle a son propre nom: la forme
spéciale \tm{setq}. Cette forme spéciale est comme \tm{set} sauf que
le premier argument a automatiquement une quote, donc vous n'avez pas
besoin de tapez une quote vous-même. En outre, par commodité,
\tm{setq} vous permez de régler plusieurs variables différentes avec
différentes valeurs, toutes en une expression.

Pour affecter la variable \tm{carnivores} de la liste \tm{'(lion tiger
  leopard)} en utilisant \tm{setq}, l'expression suivante est utilisée
:

\tm{(setq carnivores '(lion tiger leopard))}

Avec \tm{set}, l'expression ressemblerait à ça :

\tm{(set 'carnivores '(lion tiger leopard))}

En outre, \tm{setq} peut être utlisée pour assigner différentes
valeurs à différentes variables. Le premier argument est lié à la
valeur du second argument, le troisième est lié à la valeur du
quatrième, et ainsi de suite. Par exemple, vous pouvez utiliser ce qui
suit pour affecter une liste d'arbres au symbole \tm{trees} et une
liste d'herbivores au symbole \tm{herbivores} : 

\tm{(setq trees '(pine fir oak maple)}

\tm{herbivores '(gazelle antelope zebra))}

(L'expression aurait aussi bien pu être sur une seule ligne, mais ça
n'aurait pas été bien mis en page; et les humains trouvent qu'il est
plus simple de lire les listes qui sont bien mises en page.)

Même si j'utilise le terme 'assigner', il y a une autre façon de
penser le travail de \tm{set} et \tm{setq}; et c'est de dire que
\tm{set} et \tm{setq} mettent le symbole \textit{point} dans la
liste. Cette dernière façon de penser est très communes et dans les
chapitres à venir nous verrons au moins un symbole qui a 'pointer'
comme partie de son nom. Le nome est choisi parcee le symbole a une
valeur, spécifiquement une liste, attachée à lui; ou, dit autrement,
le symbole est réglé pour <<pointer>> sur la liste.

\subsection{Compteurs}\etchss{1}{9}{3}

Voici un exemple qui montre comment utiliser \tm{setq} dans un
compteur. Vous devez utiliser cela pour compter combien de fois une
partie de votre programme se répète. D'abord initialiser une variable
à zéro; ensuite ajouter un au nombre chaque fois que le programme se
répète. Pour faire cela, vous avez besoin d'une variable qui sert à
compter, et de deux expressions: une expression \tm{setq} initiale qui
affecte le compteur à zéro; et une seconde expression \tm{setq} qui
incrémente le compteur chaque fois qu'elle est évaluée.

\begin{center}
  \begin{tabular}[m]{ll}
    \tm{(setq counter 0)} & ; appelons-le l'initialisateur  \\
    \tm{(setq counter (+ counter 1))} & ; c'est l'incrémenteur \\
    \tm{counter}                     & ; c'est le compteur
  \end{tabular}
\end{center}

(Le texte suivant le ';' sont des commentaires. Voir Section
\cfchss{3}{2}{1} ``Change a Function Definition'', page
\cfchssg{3}{2}{1}.)

Si vous évaluez la première de ces expressions, l'initialisateur,
\tm{(setq counter 0)}, et ensuite évaluez la troisième expression,
\tm{counter}, le nombre 0 apparaît dans la zone d'écho. Si vous
évaluez ensuite la seconde expression, l'incrémenteur, \tm{(setq
  counter (+ counter 1))}, le compteur aura la valeur 1. Donc si vous
évaluez \tm{counter}, le nombre 1 apparaîtra dans la zone
d'écho. Chaque fois que évaluez la seconde expression, la valeur du
compteur sera incrémentée.

Quand vous évaluez l'incrémenteur, \tm{(setq counter (+ counter 1))},
l'interprète Lisp évalue d'abord la liste la plus interne; c'est
l'addition. Afin d'évaluer cette liste, il doit évaluer la variable
\tm{counter} et le nombre 1. Quand il évalue la variable \tm{counter},
il reçoit sa valeur courante. Il passe cette valeur et le nombre 1 à
la fonction \tm{+} qui les ajoute ensemble. La somme est ensuite
renvoyée à la valeur de la liste qui la contient et passée à la
fonction \tm{setq} qui affecte la variable \tm{counter} de cette
nouvelle valeur. Ainsi la valeur de la variable, \tm{counter}, est modifiée.

\section{Résumé}\etchs{1}{10}

L'apprentissage de Lisp est comme l'escalade d'une colline dans
laquelle la première partie est la plus dure. Vous avez maintenant
grimpé la partie la plus difficile; ce qui reste deviendra plus facile
maintenant que vous avez progressé.

En résumé,
\begin{itemize}
\item Les programmes Lisp sont constitués d'expressions, qui sont des
  listes ou des atomes individuels.
\item Les listes sont constituées de 0 ou plusieurs atomes ou de
  listes internes, séparées par des espaces et entourées par des
  parenthèses. Une liste peut être vide.
\item Les atomes sont des symboles multi-caractères, comme
  \tm{forward-paragraph}, symboles caractère simple comme \tm{+},
  chaînes de caractères entre guillemets, ou des nombres.
\item Un nombre s'évalue lui-même.
\item Une chaîne entre guillemets s'évalue également elle-même.
\item Lorsque vous évaluez un symbole par lui-même, sa valeur est
  renvoyée.
\item Lorsque vous évaluez une liste, l'interprète Lisp regarde
  d'abord le premier symbole dans la liste et ensuite la fonction liée
  à ce symbole. Ensuite les instructions dans la définition de
  fonction sont effectuées.
\item Un guillemet simple (quote), \tm{'}, dit à l'interprète Lisp
  qu'il devrait renvoyer l'expression suivante comme écrite, et ne pas
  l'évaluer comme si la quote n'était pas là.
\item Les arguments sont des information passées à la fonction. Les
  arguments d'une fonction sont calculés par évaluation du reste des
  éléments de la liste dont la fonction est le premier élément.
\item Une fonction renvoie toujours une valeur quand elle est évaluée
  ( à moins d'obtenir une erreur); en outre, il peut aussi effectuer
  une action appelée <<effet secondaire>>. Dans de nombreux cas, le
  but principal d'une fonction est de créer un effet secondaire.
\end{itemize}



\section{Exercices}\etchs{1}{11}

Quelques exercices simples :
\begin{itemize}
\item Générer un message d'erreur en évaluant un symbole approprié qui
  n'est pas entre parenthèses.
\item Générer un message d'erreur en évaluant un symbole approprié
  entre parenthèses.
\item Créer un compteur qui incrémente par deux au lieu de un.
\item \'Ecrire une expression qui affiche un message dans la zone
  d'écho quand il est évalué.
\end{itemize}


