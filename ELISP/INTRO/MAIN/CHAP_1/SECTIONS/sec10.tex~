\chapter{Traitement de liste}\etch{1}

Pour un \oe{}il non exercé, Lisp est un langage de programmation
étrange. Dans du code Lisp il y a des parenthèses partout. Certains
prétendent même que le nom signifie <<Lots of Isolated Silly
Parentheses\footnote{Beaucoup de parenthèses idiotes isolées}>>. Mais
cette prétention est injustifiée. Lisp signifie LISt
Processing\footnote{traitement de liste}, et le langage de
programmation gère les listes (et listes de listes) en les mettant entre
parenthèses. Les parenthèses marquent les limites de la
liste. Parfois, une liste est précédée par une apostrophe ou
guillemet, <<'>>\footnote{L'apostrophe ou guillemet simple est
  l'abréviation de la fonction citation; les fonctions sont définies
  dans la section \cfchs{1}{3} Générer un message d'erreur,
  page\cfchsg{1}{3}} les listes sont la base de Lisp.

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec1}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec2}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec3}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec4}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec5}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec6}
 
\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec7}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec8}

\input{/Volumes/DATA/GEEK/MANUALS/ELISP/INTRO/MAIN/CHAP_1/SECTIONS/sec9}

\section{Résumé}\etchs{1}{10}

L'apprentissage de Lisp est comme l'escalade d'une colline dans
laquelle la première partie est la plus dure. Vous avez maintenant
grimpé la partie la plus difficile; ce qui reste deviendra plus facile
maintenant que vous avez progressé.

En résumé,
\begin{itemize}
\item Les programmes Lisp sont constitués d'expressions, qui sont des
  listes ou des atomes individuels.
\item Les listes sont constituées de 0 ou plusieurs atomes ou de
  listes internes, séparées par des espaces et entourées par des
  parenthèses. Une liste peut être vide.
\item Les atomes sont des symboles multi-caractères, comme
  \tm{forward-paragraph}, symboles caractère simple comme \tm{+},
  chaînes de caractères entre guillemets, ou des nombres.
\item Un nombre s'évalue lui-même.
\item Une chaîne entre guillemets s'évalue également elle-même.
\item Lorsque vous évaluez un symbole par lui-même, sa valeur est
  renvoyée.
\item Lorsque vous évaluez une liste, l'interprète Lisp regarde
  d'abord le premier symbole dans la liste et ensuite la fonction liée
  à ce symbole. Ensuite les instructions dans la définition de
  fonction sont effectuées.
\item Un guillemet simple (quote), \tm{'}, dit à l'interprète Lisp
  qu'il devrait renvoyer l'expression suivante comme écrite, et ne pas
  l'évaluer comme si la quote n'était pas là.
\item Les arguments sont des information passées à la fonction. Les
  arguments d'une fonction sont calculés par évaluation du reste des
  éléments de la liste dont la fonction est le premier élément.
\item Une fonction renvoie toujours une valeur quand elle est évaluée
  ( à moins d'obtenir une erreur); en outre, il peut aussi effectuer
  une action appelée <<effet secondaire>>. Dans de nombreux cas, le
  but principal d'une fonction est de créer un effet secondaire.
\end{itemize}



\section{Exercices}\etchs{1}{11}

Quelques exercices simples :
\begin{itemize}
\item Générer un message d'erreur en évaluant un symbole approprié qui
  n'est pas entre parenthèses.
\item Générer un message d'erreur en évaluant un symbole approprié
  entre parenthèses.
\item Créer un compteur qui incrémente par deux au lieu de un.
\item \'Ecrire une expression qui affiche un message dans la zone
  d'écho quand il est évalué.
\end{itemize}


